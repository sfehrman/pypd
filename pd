#!/usr/bin/env python3

import os
import getopt
import sys
import operator
import time
import stat
import pwd
import grp

'''
License: https://opensource.org/licenses/MIT
Author: Scott Fehrman sfehrman@me.com

THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE 
SOFTWARE.
'''

# ---------
# Constants
# ---------

_VERSION = "1.1.2"
_GETOPT_STR = "bcd:hilmn:ps:t:u:vABCDLST"
_ATIME = "atime"
_INODE = "inode"
_NLINK = "nlink"
_MTIME = "mtime"
_NAME = "name"
_SIZE = "size"
_CTIME = "ctime"

# ----------------
# Global variables
# ----------------

pad_chars = 3
max_name_len = 1
display_columns = 0
entries_list = []
files_list = []
dirs_list = []
args_list = []
names_list = []
sort_by = _NAME             # sort attribute
show_files = True           # show the file entries
show_dirs = True            # show the directory entries
use_count_only = False      # do not show the files / dirs, just the count data
use_brief = False           # do not print extra blank lines
use_single_col = False      # show files / directories in a single column
use_detail = False          # show details
use_reverse = False         # reverse the sort
show_dot = True             # show hidden files (name begins with a dot)
show_hdr = True             # show column headers, alternate output format
show_name = True            # show the user and group names instead of uid and gid
show_pwd = True             # show directory path
show_qty = True             # show quantities for Entries, Files, Directories
show_link = False           # show symbolic link info, not what link points to
show_mode = False           # show the permission mode [4777]
display_col_size = False    # show file size
display_col_dtm = False     # show Date Time modified
display_col_dta = False     # show Date Time accessed
display_col_dtc = False     # show Date Time changed status (chmod)
display_col_inode = False   # show Inode number
display_col_link = False    # show link count
display_col_blocks = False  # show blocks allocated
display_col_type = False    # show the file type
display_col_perm = False    # show the file permissions (rwx...)
need_mode = False
date_format_YMD = '%Y-%m-%d %H:%M:%S'
date_format_MDY = '%m-%d-%Y %H:%M:%S'
date_format_DMY = '%d-%m-%Y %H:%M:%S'
date_format = date_format_YMD
unit_divide = 1  # byte = 1, KB = 1000 ** 1, MB = 1000 ** 2, GB = 1000 ** 3
unit_text = "Size (Bytes)" # default file size unit


# --------
# functions
# --------


def show_help():
    text = """
    -b        brief, unformatted output
    -c        count entries only
    -d <args> date/time options: [full|f|dtm|m|dta|a|dtc|s] [mdy|dmy|ymd]
    -h        help
    -i        show inode numbers
    -l        show symbolic link's status
    -m        show permissions mode [4777]
    -n <args> no output options: [dot|d|hdr|h|name|n|pwd|p|qty|q]
    -p        permissions: rwx rwx rwx   name.group
    -s <args> sorting options: (default = '-s name')
              [none|0|name|n|dtm|m|dta|a|dtc|c|inode|i|link|l|size|s,rev|r] 
    -t <args> select type: [file|f|dir|d] (default show both) 
    -u <args> select unit for file size: [b|k|m|g] (default = '-u b') implicitly uses '-S'
    -v        program version
    -A        show all entries (including '.' and '..')
    -B        show file blocks allocated
    -C        output using single column
    -D        show sub-directory information not the entries (treat it like a file)
    -L        show hard link count
    -S        show file size (default = bytes)
    -T        show file types
    """
    print(text)
    exit(0)


class Entry:
    def __init__(self, name, path):
        self.error = False    # an error occured
        self.message = None   # error message
        self.path = path      # full filesystem pathname to entry
        self.name = name      # entry name, in the path location
        self.symbolic = None  # symbolic link information
        self.mode = 0         # stat mode data
        self.size = 0         # stat file size
        self.blocks = 0       # stat filesystem blocks
        self.inode = 0        # stat inode
        self.nlink = 0        # stat number of (hard) links
        self.uid = 0          # stat user id
        self.gid = 0          # stat group id
        self.mtime = 0.0      # stat date / time modified
        self.atime = 0.0      # stat date / time accessed
        self.ctime = 0.0      # stat date / time changed status


def get_entry(entry_name, path_name):
    is_error = False
    is_link = False
    link_info = ""
    err_msg = ""

    entry = Entry(entry_name, path_name)

    try:
        if os.path.exists(path_name):
            if os.path.islink(path_name):
                is_link = True
                if show_link:
                    entry_stat = os.lstat(path_name)
                    link_info = "(Link Data)"
                else:
                    entry_stat = os.stat(path_name)
                    link_info = os.readlink(path_name)
            else:
                entry_stat = os.stat(path_name)
        else:  # might be a broken symbolic link try "lstat()"
            entry_stat = os.lstat(path_name)
            is_link = True
            link_info = "(Bad Link) " + os.readlink(path_name)
    except OSError as e:
        is_error = True
        err_msg = str(e)

    if is_error:
        entry.error = True
        entry.message = err_msg
    else:
        if is_link:
            entry.symbolic = link_info
        if need_mode:
            entry.mode = entry_stat.st_mode
        if display_col_size:
            entry.size = entry_stat.st_size
        if display_col_blocks:
            entry.blocks = entry_stat.st_blocks
        if display_col_dtm:
            entry.mtime = entry_stat.st_mtime
        if display_col_dta:
            entry.atime = entry_stat.st_atime
        if display_col_dtc:
            entry.ctime = entry_stat.st_ctime
        if display_col_inode:
            entry.inode = entry_stat.st_ino
        if display_col_link:
            entry.nlink = entry_stat.st_nlink
        if display_col_perm:
            entry.uid = entry_stat.st_uid
            entry.gid = entry_stat.st_gid

    return entry


def sort_entries(random_list):
    if len(sort_by) == 0:
        return random_list
    else:
        return sorted(random_list, key=operator.attrgetter(sort_by), reverse=use_reverse)


def display_default(entries):
    count = 0
    fill = 0
    newline = False

    if not use_brief:
        print("")

    if use_single_col:
        for entry in entries:
            print(entry.name)
    else:
        count = 0
        for entry in entries:
            count += 1

            print(entry.name, end='')

            if count < display_columns:
                fill = (max_name_len - len(entry.name))
                print(' ' * fill, end='')
                newline = True
            else:
                count = 0
                print("")
                newline = False

        if newline:
            print("")
    return


def display_details(entries):
    pwd_data = {}
    grp_data = {}
    user_name = ""
    group_name = ""

    if not use_brief and show_hdr:
        print("")

        print("Name" + ' ' * (max_name_len - 4), end='')

        if display_col_size:
            print(' ' * (16 - len(unit_text)) + unit_text, end='')

        if display_col_blocks:
            print(' ' * 6 + 'Blocks', end='')

        if display_col_inode:
            print(' ' * 7 + 'Inode', end='')

        if display_col_link:
            print(' ' * 3 + 'Links', end='')

        if display_col_perm:
            if show_mode:
                print(' ' * pad_chars +
                      'User  Group Other   [Mode]        User.Group' + ' ' * 7,
                      end='')
            else:
                print(' ' * pad_chars +
                      'User  Group Other           User.Group' + ' ' * 7,
                      end='')

        if display_col_dtm:
            print(' ' * pad_chars + 'Modified' + ' ' * 11, end='')

        if display_col_dta:
            print(' ' * pad_chars + 'Accessed' + ' ' * 11, end='')

        if display_col_dtc:
            print(' ' * pad_chars + 'Status Changed' + ' ' * 5, end='')

        if display_col_type:
            print(' ' * pad_chars + 'Type' + ' ' * 12, end='')

        print("")

        print("-" * terminalCols)

    for entry in entries:
        print(entry.name, end='')

        fill = (max_name_len - len(entry.name))
        print(' ' * fill, end='')

        if entry.error:
            print(' ' * pad_chars + entry.message)
        else:
            if display_col_size:
                size = entry.size // unit_divide
                print(' ' * (16 - len(str(size))) + str(size), end='')

            if display_col_blocks:
                print(
                    ' ' * (12 - len(str(entry.blocks))) + str(entry.blocks), end='')

            if display_col_inode:
                print(
                    ' ' * (12 - len(str(entry.inode))) + str(entry.inode), end='')

            if display_col_link:
                print(
                    ' ' * (8 - len(str(entry.nlink))) + str(entry.nlink), end='')

            if display_col_perm:
                # ---- User

                print(' ' * pad_chars, end='')

                if stat.S_IMODE(entry.mode) & stat.S_IRUSR == stat.S_IRUSR:
                    print('r', end='')
                else:
                    print('-', end='')

                if stat.S_IMODE(entry.mode) & stat.S_IWUSR == stat.S_IWUSR:
                    print('w', end='')
                else:
                    print('-', end='')

                if stat.S_IMODE(entry.mode) & stat.S_IXUSR == stat.S_IXUSR:
                    if stat.S_IMODE(entry.mode) & stat.S_ISUID == stat.S_ISUID:
                        print('s', end='')
                    else:
                        print('x', end='')
                else:
                    if stat.S_IMODE(entry.mode) & stat.S_ISUID == stat.S_ISUID:
                        print('S', end='')
                    else:
                        print('-', end='')

                # ---- Group

                print('   ', end='')

                if stat.S_IMODE(entry.mode) & stat.S_IRGRP == stat.S_IRGRP:
                    print('r', end='')
                else:
                    print('-', end='')

                if stat.S_IMODE(entry.mode) & stat.S_IWGRP == stat.S_IWGRP:
                    print('w', end='')
                else:
                    print('-', end='')

                if stat.S_IMODE(entry.mode) & stat.S_IXGRP == stat.S_IXGRP:
                    if stat.S_IMODE(entry.mode) & stat.S_ISGID == stat.S_ISGID:
                        print('s', end='')
                    else:
                        print('x', end='')
                else:
                    if stat.S_IMODE(entry.mode) & stat.S_ISGID == stat.S_ISGID:
                        print('S', end='')
                    else:
                        print('-', end='')

                # ---- Other

                print('   ', end='')

                if stat.S_IMODE(entry.mode) & stat.S_IROTH == stat.S_IROTH:
                    print('r', end='')
                else:
                    print('-', end='')
                if stat.S_IMODE(entry.mode) & stat.S_IWOTH == stat.S_IWOTH:
                    print('w', end='')
                else:
                    print('-', end='')
                if stat.S_IMODE(entry.mode) & stat.S_IXOTH == stat.S_IXOTH:
                    print('x', end='')
                else:
                    print('-', end='')

                print('     ', end='')

                if show_mode:
                    print('[' + oct(entry.mode)[-4:] + ']', end='')

                if show_name:
                    pwd_data = pwd.getpwuid(entry.uid)
                    grp_data = grp.getgrgid(entry.gid)

                    user_name = pwd_data[0]
                    group_name = grp_data[0]

                    if len(user_name) > 12:
                        user_name = user_name[:12]

                    if len(group_name) > 12:
                        group_name = group_name[:12]

                    print(' ' * (12 - len(user_name)) + user_name + '.', end='')
                    print(str(group_name) + ' ' *
                          (12 - len(str(group_name))), end='')
                else:
                    print(
                        ' ' * (12 - len(str(entry.uid))) + str(entry.uid) + '.', end='')
                    print(str(entry.gid) + ' ' *
                          (12 - len(str(entry.gid))), end='')

            if display_col_dtm:
                print(' ' * pad_chars +
                      str(time.strftime(date_format,
                                        time.localtime(entry.mtime))), end='')

            if display_col_dta:
                print(' ' * pad_chars +
                      str(time.strftime(date_format,
                                        time.localtime(entry.atime))), end='')

            if display_col_dtc:
                print(' ' * pad_chars +
                      str(time.strftime(date_format,
                                        time.localtime(entry.ctime))), end='')

            if display_col_type:
                print(' ' * pad_chars, end='')
                if stat.S_ISLNK(entry.mode):
                    print('Symbolic Link   ', end='')
                elif stat.S_ISCHR(entry.mode):
                    print('Character Device', end='')
                elif stat.S_ISBLK(entry.mode):
                    print('Block Device    ', end='')
                elif stat.S_ISFIFO(entry.mode):
                    print('FIFO            ', end='')
                elif stat.S_ISREG(entry.mode):
                    print('Regular File    ', end='')
                elif stat.S_ISSOCK(entry.mode):
                    print('Socket          ', end='')
                elif stat.S_ISDOOR(entry.mode):
                    print('Door            ', end='')
                if stat.S_ISDIR(entry.mode):
                    print('Directory       ', end='')

            if entry.symbolic:
                print(' -> ' + entry.symbolic, end='')

        print('')

    return


# --------
# processing
# --------


inputList = sys.argv[1:]
terminalCols = os.get_terminal_size(0).columns  # size(x) = 0,1,2,3

try:
    args_list, names_list = getopt.getopt(inputList, _GETOPT_STR)
except getopt.error as e:
    print(str(e))
    exit(1)

# print(argsList)
# print(namesList)
# exit(0)

for flag, option in args_list:
    # print("flag: '" + flag + "', option: '" + option + "'")
    if flag == "-b":
        use_brief = True
    elif flag == "-c":
        use_count_only = True
    elif flag == "-d":
        for subopt in option.split(","):
            if subopt == "dtm" or subopt == "m":
                display_col_dtm = True
                use_detail = True
            elif subopt == "dta" or subopt == "a":
                display_col_dta = True
                use_detail = True
            elif subopt == "dtc" or subopt == "c":
                display_col_dtc = True
                use_detail = True
            elif subopt == "full" or subopt == "f":
                display_col_dtm = True
                display_col_dta = True
                display_col_dtc = True
                use_detail = True
            elif subopt == "mdy":
                date_format = date_format_MDY
            elif subopt == "dmy":
                date_format = date_format_DMY
            elif subopt == "ymd":
                date_format = date_format_YMD
            else:
                print("Invalid value '" + subopt + "' for switch '-d'")
                exit(1)
    elif flag == "-h":
        show_help()
    elif flag == "-i":
        display_col_inode = True
        use_detail = True
    elif flag == "-l":
        show_link = True
    elif flag == "-m":
        need_mode = True
        show_mode = True
        display_col_perm = True
        use_detail = True
    elif flag == "-n":
        for subopt in option.split(","):
            if subopt.lower() == "dot" or subopt.lower() == "d":
                show_dot = False
            elif subopt.lower() == "hdr" or subopt.lower() == "h":
                show_hdr = False
            elif subopt.lower() == "name" or subopt.lower() == "n":
                show_name = False
            elif subopt.lower() == "pwd" or subopt.lower() == "p":
                show_pwd = False
            elif subopt.lower() == "qty" or subopt.lower() == "q":
                show_qty = False
            else:
                print("Unknown sub option '" + subopt + "' for switch '-n'")
                exit(1)
    elif flag == "-p":
        need_mode = True
        display_col_perm = True
        use_detail = True
    elif flag == "-s":
        for subopt in option.split(","):
            if subopt.lower() == "none" or subopt.lower() == "0":
                sort_by = ""
            elif subopt.lower() == "name" or subopt.lower() == "n":
                sort_by = _NAME
            elif subopt.lower() == "rev" or subopt.lower() == "r":
                use_reverse = True
            elif subopt.lower() == "size" or subopt.lower() == "s":
                sort_by = _SIZE
                display_col_size = True
                use_detail = True
            elif subopt.lower() == "dtm" or subopt.lower() == "m":
                sort_by = _MTIME
                display_col_dtm = True
                use_detail = True
            elif subopt.lower() == "dta" or subopt.lower() == "a":
                sort_by = _ATIME
                display_col_dta = True
                use_detail = True
            elif subopt.lower() == "dtc" or subopt.lower() == "c":
                sort_by = _CTIME
                display_col_dtc = True
                use_detail = True
            elif subopt.lower() == "inode" or subopt.lower() == "i":
                sort_by = _INODE
                display_col_inode = True
                use_detail = True
            elif subopt.lower() == "link" or subopt.lower() == "l":
                sort_by = _NLINK
                display_col_link = True
                use_detail = True
            else:
                print("Unknown sub option '" + subopt + "' for switch '-s'")
                exit(1)
    elif flag == "-t":
        if option.lower().startswith("f"):
            show_files = True
            show_dirs = False
        elif option.lower().startswith("d"):
            show_files = False
            show_dirs = True
        else:
            print("Invalid value '" + option + "' for switch '-t'")
            exit(1)
    elif flag == "-u":
        use_detail = True
        display_col_size = True
        for subopt in option.split(","):
            if subopt.lower() == "b":
                unit_divide = 1
                unit_text = "Size (Bytes)"
            elif subopt.lower() == "k":
                unit_divide = 1000 ** 1
                unit_text = "Size (KBytes)"
            elif subopt.lower() == "m":
                unit_divide = 1000 ** 2
                unit_text = "Size (MBytes)"
            elif subopt.lower() == "g":
                unit_divide = 1000 ** 3
                unit_text = "Size (GBytes)"
            else:
                print("Unkown sub option '" + subopt + "' for switch '-u'")
                exit(1)
    elif flag == "-v":
        print('Print Directory (pd) v' + _VERSION + ' Python Edition')
        exit(0)
    elif flag == "-B":
        display_col_blocks = True
        use_detail = True
    elif flag == "-C":
        use_single_col = True
    elif flag == "-L":
        display_col_link = True
        use_detail = True
    elif flag == "-S":
        display_col_size = True
        use_detail = True
    elif flag == "-T":
        need_mode = True
        display_col_type = True
        use_detail = True

if len(names_list) == 0:
    names_list.append(".")

for name in names_list:
    entries_list = []
    files_list = []
    dirs_list = []
    sortedList = []
    max_name_len = 1

    if not use_brief:
        print("")
        if len(names_list) > 1:
            print("-" * terminalCols)

    if name == ".":
        name = os.getcwd()

    if not os.path.exists(name):
        print("No such file or directory: '" + name + "\n")
        exit(2)

    if os.path.isdir(name):
        try:
            entries_list = os.listdir(name)
        except FileNotFoundError as e:
            print("File Not Found: '" + name + "'")
            continue
        except PermissionError as e:
            print("Permission Denied: '" + name + "'")
            continue
    else:
        entries_list.append(name)

    for entry in entries_list:
        if entry.startswith(".") and not show_dot:
            continue

        pathname = os.path.join(name, entry)

        if os.path.isdir(pathname):
            dirs_list.append(get_entry(entry, pathname))
        else:
            files_list.append(get_entry(entry, pathname))

        if (len(entry) + pad_chars) > max_name_len:
            max_name_len = len(entry) + pad_chars

    if show_pwd:
        print(name, end="")
    if show_qty:
        if show_pwd:
            print("   ", end="")
        print("Entries: " + str(len(entries_list)), end="")
    if show_pwd or show_qty:
        print("")

    display_columns = terminalCols // max_name_len

    if show_files and len(files_list) > 0:
        if not use_brief:
            print("")

        if show_qty:
            print("Files: " + str(len(files_list)))

        if len(files_list) > 0 and not use_count_only:
            sortedList = sort_entries(files_list)

            if use_detail:
                display_details(sortedList)
            else:
                display_default(sortedList)

    if show_dirs and len(dirs_list) > 0:
        if not use_brief:
            print("")

        if show_qty:
            print("Directories: " + str(len(dirs_list)))

        if len(dirs_list) > 0 and not use_count_only:
            sortedList = sort_entries(dirs_list)

            if use_detail:
                display_details(sortedList)
            else:
                display_default(sortedList)

if not use_brief:
    print("")
