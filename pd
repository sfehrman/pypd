#!/usr/bin/env python3

import os
import getopt
import sys
import operator

VERSION = "1.0.0"
GETOPT_STR = "bcd:hilmn:ps:t:u:vABCDLRST"
_mode = "mode"
_name = "name"
_size = "size"
terminalCols = 0
padChars = 3
maxNameLen = 1
displayCols = 0
entriesList = []
filesList = []
dirsList = []
inputList = []
argsList = []
namesList = []
sortBy = _name
bFiles = True
bDirs = True
bCountOnly = False  # do not show the files / dirs, just the count data
bBrief = False  # do not print extra blank lines
bSingleCol = False  # show files / directories in a single column
bShowDot = True  # show hidden files (name begins with a dot)
bShowHdr = True  # show column headers with alternate output format
bShowName = True
bShowPwd = True  # show the directory path
bShowQty = True  # show the quantities for Entries, Files, Directories
bSortReverse = False
bDisplayDetail = False
bColSize = False

"""
Dictionary for an Entry:
{
  "name": "foo",
  "size": 1234,
  "date": {
    "modified": "date/time",
    "accessed": "date/time",
    "status": "date/time"
  }
}
"""

# --------
# functions
# --------


def show_help():
    text = """
    -b        brief, unformatted output
    -c        count entries only
    -d <args> date/time options: [all|dtm|dta|dts] [mdy|dmy|ymd]
    -h        help
    -i        show inode numbers
    -l        show symbolic link's status
    -m        show permissions mode [4777]
    -n <args> no output options: [dot,hdr,name,pwd,qty]
    -p        permissions: rwx rwx rwx   name.group
    -s <args> sorting options: [none|name|dtm|dta|dts|user|group|inode|link|size|type,rev] (default = '-s name') 
    -t <args> select type: [file|f,dir|d] (default show both) 
    -u <args> select unit for file size: [b|k|m|g] (default = '-u b') implicitly uses '-S'
    -v        program version
    -A        show all entries (jncluding '.' and '..')
    -B        show file blocks allocated
    -C        output using single column
    -D        show sub-directory information not it's entries (treat it like a file)
    -L        show hard link count
    -R        recursive list into sub-directories
    -S        show file size (default = bytes)
    -T        show file types
    """
    print(text)
    exit(0)


def sort_entries(random_list):
    return sorted(random_list, key=operator.itemgetter(sortBy), reverse=bSortReverse)


def display_default(data_list):
    count = 0
    fill = 0
    newline = False

    if not bBrief:
        print("")

    if bSingleCol:
        for data in data_list:
            print(data[_name])
    else:
        count = 0
        for data in data_list:
            count += 1

            print(data[_name], end='')

            if count < displayCols:
                fill = (maxNameLen - len(data[_name]))
                print(' ' * fill, end='')
                newline = True
            else:
                count = 0
                print("")
                newline = False

        if newline:
            print("")
    return


def display_details(data_list):

    if not bBrief:
        print("")

        print("Name:", end='')
        print(' ' * (maxNameLen - 5), end='')

        if bColSize:
            print("Size (bytes):", end='')

        print("")

        print("-" * terminalCols)

    for data in data_list:
        print(data[_name], end='')

        fill = (maxNameLen - len(data[_name]))
        print(' ' * fill, end='')

        if bColSize:
            print(' ' * (13 - len(str(data[_size]))), end='')
            print(str(data[_size]), end='')

        print("")

    return


# --------
# processing
# --------


inputList = sys.argv[1:]
terminalCols = os.get_terminal_size(0).columns  # size(x) = 0,1,2,3

try:
    argsList, namesList = getopt.getopt(inputList, GETOPT_STR)
except getopt.error as e:
    print(str(e))
    exit(1)

# print(argsList)
# print(namesList)
# exit(0)

for flag, option in argsList:
    # print("flag: '" + flag + "', option: '" + option + "'")
    if flag == "-b":
        bBrief = True
    elif flag == "-c":
        bCountOnly = True
    elif flag == "-h":
        show_help()
    elif flag == "-t":
        if option.lower().startswith("f"):
            bFiles = True
            bDirs = False
        elif option.lower().startswith("d"):
            bFiles = False
            bDirs = True
        else:
            print("Invalid value '" + option + "' for switch '-t'")
            exit(1)
    elif flag == "-n":
        for subopt in option.split(","):
            if subopt.lower() == "dot":
                bShowDot = False
            elif subopt.lower() == "hdr":
                bShowHdr = False
            elif subopt.lower() == "name":
                bShowName = False
            elif subopt.lower() == "pwd":
                bShowPwd = False
            elif subopt.lower() == "qty":
                bShowQty = False
            else:
                print("Unknown sub option '" + subopt + "' for switch '-n'")
                exit(1)
    elif flag == "-s":
        for subopt in option.split(","):
            if subopt.lower() == "rev":
                bSortReverse = True
            elif subopt.lower() == "size":
                sortBy = _size
                bColSize = True
                bDisplayDetail = True
            else:
                print("Unknown sub option '" + subopt + "' for switch '-s'")
                exit(1)

    elif flag == "-C":
        bSingleCol = True

    elif flag == "-S":
        bColSize = True
        bDisplayDetail = True

if len(namesList) == 0:
    namesList.append(".")

for name in namesList:
    entriesList = []
    filesList = []
    dirsList = []
    sortedList = []
    maxNameLen = 1

    if not bBrief:
        print("")
        if len(namesList) > 1:
            print("-" * terminalCols)

    if name == ".":
        name = os.getcwd()

    if not os.path.exists(name):
        print("No such file or directory: '" + name + "\n")
        exit(2)

    if os.path.isdir(name):
        try:
            entriesList = os.listdir(name)
        except FileNotFoundError as e:
            print("File Not Found: '" + name + "'")
            continue
        except PermissionError as e:
            print("Permission Denied: '" + name + "'")
            continue
    else:
        entriesList.append(name)

    for entry in entriesList:
        if entry.startswith(".") and not bShowDot:
            continue

        pathname = os.path.join(name, entry)
        mode = os.stat(pathname).st_mode
        size = os.stat(pathname).st_size

        # print("mode: " + str(mode))  # debug

        if os.path.isdir(pathname):
            dirsList.append({
                _name: entry,
                _mode: mode,
                _size: size
            })
        else:
            # print("size: " + str(size))  # debug
            filesList.append({
                _name: entry,
                _mode: mode,
                _size: size
            })

        if (len(entry) + padChars) > maxNameLen:
            maxNameLen = len(entry) + padChars

    if bShowPwd:
        print(name, end="")
    if bShowQty:
        if bShowPwd:
            print("   ", end="")
        print("Entries: " + str(len(entriesList)), end="")
    if bShowPwd or bShowQty:
        print("")

    displayCols = terminalCols // maxNameLen

    if bFiles:
        if not bBrief:
            print("")

        if bShowQty:
            print("Files: " + str(len(filesList)))

        if len(filesList) > 0 and not bCountOnly:
            sortedList = sort_entries(filesList)

            if bDisplayDetail:
                display_details(sortedList)
            else:
                display_default(sortedList)

    if bDirs:
        if not bBrief:
            print("")

        if bShowQty:
            print("Directories: " + str(len(dirsList)))

        if len(dirsList) > 0 and not bCountOnly:
            sortedList = sort_entries(dirsList)

            if bDisplayDetail:
                display_details(sortedList)
            else:
                display_default(sortedList)

if not bBrief:
    print("")
