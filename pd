#!/usr/bin/env python3

import os
import getopt
import sys
import operator
import time

VERSION = "1.0.0"
GETOPT_STR = "bcd:hilmn:ps:t:u:vABCDLRST"
_accessed = "accessed"
_blocks = "blocks"
_inode = "inode"
_link = "link"
_mode = "mode"
_modified = "modified"
_name = "name"
_size = "size"
_stat = "stat"
_status = "status"
_symbolic = "symbolic"
padChars = 3
maxNameLen = 1
displayCols = 0
entriesList = []
filesList = []
dirsList = []
argsList = []
namesList = []
sortBy = _name
bFiles = True
bDirs = True
bCountOnly = False  # do not show the files / dirs, just the count data
bBrief = False  # do not print extra blank lines
bSingleCol = False  # show files / directories in a single column
bShowDot = True  # show hidden files (name begins with a dot)
bShowHdr = True  # show column headers with alternate output format
bShowName = True
bShowPwd = True  # show the directory path
bShowQty = True  # show the quantities for Entries, Files, Directories
bSortReverse = False
bDisplayDetail = False
bColSize = False
bColDTM = False  # show Date Time modified
bColDTA = False  # show Date Time accessed
bColDTS = False  # show Date Time status changed (chmod)
bColInode = False  # show Inode number
bColLink = False  # show link count
bColBlocks = False  # show blocks allocated
dateFormatYMD = '%Y-%m-%d %H:%M:%S'
dateFormatMDY = '%m-%d-%Y %H:%M:%S'
dateFormatDMY = '%d-%m-%Y %H:%M:%S'
dateFormat = dateFormatYMD
unitDivide = 1  # byte = 1, KB = 1000 ** 1, MB = 1000 ** 2, GB = 1000 ** 3
unitText = ""


# --------
# functions
# --------


def show_help():
    text = """
    -b        brief, unformatted output
    -c        count entries only
    -d <args> date/time options: [all|dtm|dta|dts] [mdy|dmy|ymd]
    -h        help
    -i        show inode numbers
    -l        show symbolic link's status
    -m        show permissions mode [4777]
    -n <args> no output options: [dot,hdr,name,pwd,qty]
    -p        permissions: rwx rwx rwx   name.group
    -s <args> sorting options: [none|name|dtm|dta|dts|user|group|inode|link|size|type,rev] (default = '-s name') 
    -t <args> select type: [file|f,dir|d] (default show both) 
    -u <args> select unit for file size: [b|k|m|g] (default = '-u b') implicitly uses '-S'
    -v        program version
    -A        show all entries (jncluding '.' and '..')
    -B        show file blocks allocated
    -C        output using single column
    -D        show sub-directory information not it's entries (treat it like a file)
    -L        show hard link count
    -R        recursive list into sub-directories
    -S        show file size (default = bytes)
    -T        show file types
    """
    print(text)
    exit(0)


def get_entry(entry_name, path_name):
    entry_data = {}

    """
    Dictionary for an Entry:
    {
      "name": "foo",
      "size": 1234,
      "modified": "date/time",
      "accessed": "date/time",
      "status": "date/time"
    }
    """

    entry_stat = os.stat(path_name)

    entry_data.update({_name: entry_name})

    if os.path.islink(path_name):
        entry_data.update({_symbolic: os.readlink(path_name)})

    if bColSize:
        entry_data.update({_size: entry_stat.st_size})
    if bColBlocks:
        entry_data.update({_blocks: entry_stat.st_blocks})
    if bColDTM:
        entry_data.update({_modified: entry_stat.st_mtime})
    if bColDTA:
        entry_data.update({_accessed: entry_stat.st_atime})
    if bColDTS:
        entry_data.update({_status: entry_stat.st_ctime})
    if bColInode:
        entry_data.update({_inode: entry_stat.st_ino})
    if bColLink:
        entry_data.update({_link: entry_stat.st_nlink})

    # print("entry_data: " + str(entry_data))  # debug

    return entry_data


def sort_entries(random_list):
    if len(sortBy) == 0:
        return random_list
    else:
        return sorted(random_list, key=operator.itemgetter(sortBy), reverse=bSortReverse)


def display_default(data_list):
    count = 0
    fill = 0
    newline = False

    if not bBrief:
        print("")

    if bSingleCol:
        for data in data_list:
            print(data[_name])
    else:
        count = 0
        for data in data_list:
            count += 1

            print(data[_name], end='')

            if count < displayCols:
                fill = (maxNameLen - len(data[_name]))
                print(' ' * fill, end='')
                newline = True
            else:
                count = 0
                print("")
                newline = False

        if newline:
            print("")
    return


def display_details(data_list):

    if not bBrief:
        print("")

        print("Name" + ' ' * (maxNameLen - 4), end='')

        if bColSize:
            print(' ' * (16-len(unitText)) + unitText, end='')

        if bColBlocks:
            print(' ' * 6 + 'Blocks', end='')

        if bColInode:
            print(' ' * 7 + 'Inode', end='')

        if bColLink:
            print(' ' * 3 + 'Links', end='')

        if bColDTM:
            print(' ' * padChars + 'Modified' + ' ' * 11, end='')

        if bColDTA:
            print(' ' * padChars + 'Accessed' + ' ' * 11, end='')

        if bColDTS:
            print(' ' * padChars + 'Status Changed' + ' ' * 5, end='')

        print("")

        print("-" * terminalCols)

    for data in data_list:
        print(data[_name], end='')

        fill = (maxNameLen - len(data[_name]))
        print(' ' * fill, end='')

        if bColSize:
            # print(' ' * (13 - len(str(data[_size]))), end='')
            size = data[_size] // unitDivide
            print(' ' * (16 - len(str(size))) + str(size), end='')

        if bColBlocks:
            print(' ' * (12 - len(str(data[_blocks]))) + str(data[_blocks]), end='')

        if bColInode:
            print(' ' * (12 - len(str(data[_inode]))) + str(data[_inode]), end='')

        if bColLink:
            print(' ' * (8 - len(str(data[_link]))) + str(data[_link]), end='')

        if bColDTM:
            # print(' ' * padChars, end='')
            # print(str(time.ctime(data[_modified])), end='')
            print(' ' * padChars + str(time.strftime(dateFormat, time.localtime(data[_modified]))), end='')

        if bColDTA:
            print(' ' * padChars + str(time.strftime(dateFormat, time.localtime(data[_accessed]))), end='')

        if bColDTS:
            print(' ' * padChars + str(time.strftime(dateFormat, time.localtime(data[_status]))), end='')

        if _symbolic in data:
            print(' -> ' + data[_symbolic], end='')

        print("")

    return


# --------
# processing
# --------


inputList = sys.argv[1:]
terminalCols = os.get_terminal_size(0).columns  # size(x) = 0,1,2,3

try:
    argsList, namesList = getopt.getopt(inputList, GETOPT_STR)
except getopt.error as e:
    print(str(e))
    exit(1)

# print(argsList)
# print(namesList)
# exit(0)

for flag, option in argsList:
    # print("flag: '" + flag + "', option: '" + option + "'")
    if flag == "-b":
        bBrief = True
    elif flag == "-c":
        bCountOnly = True
    elif flag == "-d":
        for subopt in option.split(","):
            if subopt == "dtm":
                bColDTM = True
                bDisplayDetail = True
            elif subopt == "dta":
                bColDTA = True
                bDisplayDetail = True
            elif subopt == "dts":
                bColDTS = True
                bDisplayDetail = True
            elif subopt == "all":
                bColDTM = True
                bColDTA = True
                bColDTS = True
                bDisplayDetail = True
            elif subopt == "mdy":
                dateFormat = dateFormatMDY
            elif subopt == "dmy":
                dateFormat = dateFormatDMY
            elif subopt == "ymd":
                dateFormat = dateFormatYMD
            else:
                print("Invalid value '" + subopt + "' for switch '-d'")
                exit(1)
    elif flag == "-h":
        show_help()
    elif flag == "-i":
        bColInode = True
        bDisplayDetail = True
    elif flag == "-t":
        if option.lower().startswith("f"):
            bFiles = True
            bDirs = False
        elif option.lower().startswith("d"):
            bFiles = False
            bDirs = True
        else:
            print("Invalid value '" + option + "' for switch '-t'")
            exit(1)
    elif flag == "-n":
        for subopt in option.split(","):
            if subopt.lower() == "dot":
                bShowDot = False
            elif subopt.lower() == "hdr":
                bShowHdr = False
            elif subopt.lower() == "name":
                bShowName = False
            elif subopt.lower() == "pwd":
                bShowPwd = False
            elif subopt.lower() == "qty":
                bShowQty = False
            else:
                print("Unknown sub option '" + subopt + "' for switch '-n'")
                exit(1)
    elif flag == "-s":
        for subopt in option.split(","):
            if subopt.lower() == "none":
                sortBy = ""
            elif subopt.lower() == "rev":
                bSortReverse = True
            elif subopt.lower() == "size":
                sortBy = _size
                bColSize = True
                bDisplayDetail = True
            elif subopt.lower() == "dtm":
                sortBy = _modified
                bColDTM = True
                bDisplayDetail = True
            elif subopt.lower() == "dta":
                sortBy = _accessed
                bColDTA = True
                bDisplayDetail = True
            elif subopt.lower() == "dts":
                sortBy = _status
                bColDTS = True
                bDisplayDetail = True
            elif subopt.lower() == "inode":
                sortBy = _inode
                bColInode = True
                bDisplayDetail = True
            elif subopt.lower() == "link":
                sortBy = _link
                bColLink = True
                bDisplayDetail = True
            else:
                print("Unknown sub option '" + subopt + "' for switch '-s'")
                exit(1)
    elif flag == "-u":
        bDisplayDetail = True
        bColSize = True
        for subopt in option.split(","):
            if subopt.lower() == "b":
                unitDivide = 1
                unitText = "Size (Bytes)"
            elif subopt.lower() == "k":
                unitDivide = 1000 ** 1
                unitText = "Size (KBytes)"
            elif subopt.lower() == "m":
                unitDivide = 1000 ** 2
                unitText = "Size (MBytes)"
            elif subopt.lower() == "g":
                unitDivide = 1000 ** 3
                unitText = "Size (GBytes)"
            else:
                print("Unkown sub option '" + subopt + "' for switch '-u'")
                exit(1)
    elif flag == "-B":
        bColBlocks = True
        bDisplayDetail = True
    elif flag == "-C":
        bSingleCol = True
    elif flag == "-L":
        bColLink = True
        bDisplayDetail = True
    elif flag == "-S":
        unitDivide = 1
        unitText = "Size (Bytes)"
        bColSize = True
        bDisplayDetail = True

if len(namesList) == 0:
    namesList.append(".")

for name in namesList:
    entriesList = []
    filesList = []
    dirsList = []
    sortedList = []
    maxNameLen = 1

    if not bBrief:
        print("")
        if len(namesList) > 1:
            print("-" * terminalCols)

    if name == ".":
        name = os.getcwd()

    if not os.path.exists(name):
        print("No such file or directory: '" + name + "\n")
        exit(2)

    if os.path.isdir(name):
        try:
            entriesList = os.listdir(name)
        except FileNotFoundError as e:
            print("File Not Found: '" + name + "'")
            continue
        except PermissionError as e:
            print("Permission Denied: '" + name + "'")
            continue
    else:
        entriesList.append(name)

    for entry in entriesList:
        if entry.startswith(".") and not bShowDot:
            continue

        pathname = os.path.join(name, entry)

        if os.path.isdir(pathname):
            dirsList.append(get_entry(entry, pathname))
        else:
            filesList.append(get_entry(entry, pathname))

        if (len(entry) + padChars) > maxNameLen:
            maxNameLen = len(entry) + padChars

    if bShowPwd:
        print(name, end="")
    if bShowQty:
        if bShowPwd:
            print("   ", end="")
        print("Entries: " + str(len(entriesList)), end="")
    if bShowPwd or bShowQty:
        print("")

    displayCols = terminalCols // maxNameLen

    if bFiles:
        if not bBrief:
            print("")

        if bShowQty:
            print("Files: " + str(len(filesList)))

        if len(filesList) > 0 and not bCountOnly:
            sortedList = sort_entries(filesList)

            if bDisplayDetail:
                display_details(sortedList)
            else:
                display_default(sortedList)

    if bDirs:
        if not bBrief:
            print("")

        if bShowQty:
            print("Directories: " + str(len(dirsList)))

        if len(dirsList) > 0 and not bCountOnly:
            sortedList = sort_entries(dirsList)

            if bDisplayDetail:
                display_details(sortedList)
            else:
                display_default(sortedList)

if not bBrief:
    print("")
