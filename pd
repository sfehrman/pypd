#!/usr/bin/env python3

import os
import getopt
import sys

"""
-b        brief, unformatted output
-c        count entries only
-d <args> date/time options: [all|dtm|dta|dts] [mdy|dmy|ymd]
-h        help
-i        show inode numbers
-l        show symbolic link's status
-m        show permissions mode [4777]
-n <args> no output options: [dot,hdr,name,pwd,qty
-p        permissions: rwx rwx rwx   name.group
-s <args> sorting options: [none|name|dtm|dta|dts|user|group|inode|link|size|type,rev] (default = '-s name') 
-t <args> select type: [file|f,dir|d] (default show both) 
-u <args> select unit for file size: [b|k|m|g] (default = '-u b') implicitly uses '-S'
-v        program version
-A        show all entries (jncluding '.' and '..')
-B        show file blocks allocated
-C        output using single column
-D        show sub-directory information not it's entries (treat it like a file)
-L        show hard link count
-R        recursive list into sub-directories
-S        show file size (default = bytes)
-T        show file types
"""

VERSION = "1.0.0"
GETOPT_STR = "bcd:hilmn:ps:t:u:vABCDLRST"
needNewLine = False
terminalCols = 0
padChars = 3
fillChars = 0
maxNameLen = 1
displayCols = 0
colCount = 0
entriesList = []
filesList = []
dirsList = []
inputList = []
argsList = []
namesList = []
showFiles = True
showDirs = True

inputList = sys.argv[1:]

# print("")
# print(inputList)
# print("")
# exit(0)

terminalCols = os.get_terminal_size(0).columns  # size(x) = 0,1,2,3

# print("columns: " + str(terminalCols))
# exit(0)

try:
    argsList, namesList = getopt.getopt(inputList, GETOPT_STR)
except getopt.error as e:
    print(str(e))
    exit(1)

# print("")
# print(argsList)
# print("")

for flag, option in argsList:
    # print("flag: '" + flag + "', option: '" + option + "'")
    if flag == "-t":
        if option.lower().startswith("f"):
            showFiles = True
            showDirs = False
        elif option.lower().startswith("d"):
            showFiles = False
            showDirs = True
        else:
            print("Invalid value '" + option + "' for switch '-t'")
            exit(1)

if len(namesList) == 0:
    namesList.append(".")

for name in namesList:
    entriesList = []
    filesList = []
    dirsList = []
    maxNameLen = 1

    print("")
    if len(namesList) > 1:
        print("-" * terminalCols)

    if name == ".":
        name = os.getcwd()

    if not os.path.exists(name):
        print("No such file or directory: '" + name + "\n")
        exit(2)

    if os.path.isdir(name):
        try:
            entriesList = os.listdir(name)
        except FileNotFoundError as e:
            print("File Not Found: '" + name + "'")
            continue
        except PermissionError as e:
            print("Permission Denied: '" + name + "'")
            continue
    else:
        entriesList.append(name)

    for entry in entriesList:
        if os.path.isdir(name + "/" + entry):
            dirsList.append(entry)
        else:
            filesList.append(entry)

        if (len(entry) + padChars) > maxNameLen:
            maxNameLen = len(entry) + padChars

    print(name + "   Entries: " + str(len(entriesList)))

    displayCols = terminalCols // maxNameLen

    if showFiles:
        print("")
        print("Files: " + str(len(filesList)))

        if len(filesList) > 0:
            print("")
            colCount = 0
            for file in filesList:
                colCount += 1

                print(file, end='')

                if colCount < displayCols:
                    fillChars = (maxNameLen - len(file))
                    print(' ' * fillChars, end='')
                    needNewLine = True
                else:
                    colCount = 0
                    print("")
                    needNewLine = False

            if needNewLine:
                print("")

    if showDirs:
        print("")
        print("Directories: " + str(len(dirsList)))

        if len(dirsList) > 0:
            print("")
            colCount = 0
            for directory in dirsList:
                colCount += 1

                print(directory, end='')
                if colCount < displayCols:
                    fillChars = (maxNameLen - len(directory))
                    print(' ' * fillChars, end='')
                    needNewLine = True
                else:
                    colCount = 0
                    print("")
                    needNewLine = False

            if needNewLine:
                print("")

print("")
